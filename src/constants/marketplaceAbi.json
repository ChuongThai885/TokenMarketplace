{
    "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "abi": [
        {
            "inputs": [],
            "name": "TokenMarketplace__BuyOrderExisted",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "TokenMarketplace__BuyOrderNotExist",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "TokenMarketplace__InsufficientAllowance",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "TokenMarketplace__InsufficientAmount",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "TokenMarketplace__InvalidPrice",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "TokenMarketplace__NotOwner",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "TokenMarketplace__SellOrderExisted",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "TokenMarketplace__SellOrderNotExist",
            "type": "error"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "tokenAddress",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "bool",
                    "name": "isBuyOrder",
                    "type": "bool"
                }
            ],
            "name": "OrderCanceled",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "traderMatched",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "tokenAddress",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "price",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "bool",
                    "name": "isBuyOrder",
                    "type": "bool"
                }
            ],
            "name": "OrderMatched",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "tokenAddress",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "price",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "bool",
                    "name": "isBuyOrder",
                    "type": "bool"
                }
            ],
            "name": "OrderPlaced",
            "type": "event"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "tokenAddress",
                    "type": "address"
                },
                {
                    "internalType": "bool",
                    "name": "isBuyOrder",
                    "type": "bool"
                }
            ],
            "name": "cancelOrder",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "tokenAddress",
                    "type": "address"
                }
            ],
            "name": "getBuyOrder",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "amount",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "price",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct TokenMarketplace.OrderDetail",
                    "name": "",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "tokenAddress",
                    "type": "address"
                }
            ],
            "name": "getSellOrder",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "amount",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "price",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct TokenMarketplace.OrderDetail",
                    "name": "",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "tokenAddress",
                    "type": "address"
                },
                {
                    "internalType": "bool",
                    "name": "isBuyOrder",
                    "type": "bool"
                }
            ],
            "name": "isOnOrderBook",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "tokenAddress",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "placeBuyOrder",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "tokenAddress",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "totalPrice",
                    "type": "uint256"
                }
            ],
            "name": "placeSellOrder",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ],
    "transactionHash": "0xcc74ac72919a9466b3a887ae8b644608cea606b335be6e654aa5fbf88f42fc16",
    "receipt": {
        "to": null,
        "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
        "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "transactionIndex": 0,
        "gasUsed": "2233013",
        "logsBloom": "0x
        "blockHash": "0xb4b08b2c84e5485926df8e43aeba71b83e04b0444e8c4f3f3d5fc973d21d7920",
        "transactionHash": "0xcc74ac72919a9466b3a887ae8b644608cea606b335be6e654aa5fbf88f42fc16",
        "logs": [],
        "blockNumber": 2,
        "cumulativeGasUsed": "2233013",
        "status": 1,
        "byzantium": true
    },
    "args": [],
    "numDeployments": 1,
    "solcInputHash": "b21a8eda429b95c3f399de179cd98c82",
    "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"TokenMarketplace__BuyOrderExisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenMarketplace__BuyOrderNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenMarketplace__InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenMarketplace__InsufficientAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenMarketplace__InvalidPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenMarketplace__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenMarketplace__SellOrderExisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenMarketplace__SellOrderNotExist\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBuyOrder\",\"type\":\"bool\"}],\"name\":\"OrderCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"traderMatched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBuyOrder\",\"type\":\"bool\"}],\"name\":\"OrderMatched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBuyOrder\",\"type\":\"bool\"}],\"name\":\"OrderPlaced\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBuyOrder\",\"type\":\"bool\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getBuyOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenMarketplace.OrderDetail\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getSellOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenMarketplace.OrderDetail\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBuyOrder\",\"type\":\"bool\"}],\"name\":\"isOnOrderBook\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"placeBuyOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPrice\",\"type\":\"uint256\"}],\"name\":\"placeSellOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Chuong Thai\",\"kind\":\"dev\",\"methods\":{\"cancelOrder(address,address,bool)\":{\"details\":\"remove order out of order book and send back money or token to owner\"},\"getBuyOrder(address,address)\":{\"details\":\"return detail buy order\"},\"getSellOrder(address,address)\":{\"details\":\"return detail sell order\"},\"isOnOrderBook(address,address,bool)\":{\"details\":\"check if order is still on orderbook\"},\"placeBuyOrder(address,uint256)\":{\"details\":\"Place a buy order to sell order book Takes money from sender Emits a {OrderPlaced} event\"},\"placeSellOrder(address,uint256,uint256)\":{\"details\":\"Place a sell order to sell order book Takes tokens from sender Emits a {OrderPlaced} event\"}},\"title\":\"A simple version of token marketplace\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract for creating a token marketplace with simple order matching algorithm\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenMarketplace.sol\":\"TokenMarketplace\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Extended is IERC20 {\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x9dd9bbd60865cdfefa49e546230f82e655f465055e1061f0ccfe0e322a606533\",\"license\":\"MIT\"},\"contracts/TokenMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Extended.sol\\\";\\n\\nerror TokenMarketplace__InsufficientAmount();\\nerror TokenMarketplace__InvalidPrice();\\nerror TokenMarketplace__InsufficientAllowance();\\nerror TokenMarketplace__NotOwner();\\nerror TokenMarketplace__SellOrderExisted();\\nerror TokenMarketplace__BuyOrderExisted();\\nerror TokenMarketplace__BuyOrderNotExist();\\nerror TokenMarketplace__SellOrderNotExist();\\n\\n/**\\n * @title A simple version of token marketplace\\n * @author Chuong Thai\\n * @notice This contract for creating a token marketplace with simple order matching algorithm\\n */\\ncontract TokenMarketplace {\\n    struct UserOrder {\\n        address owner;\\n        address tokenAddress;\\n    }\\n    struct OrderDetail {\\n        uint256 amount;\\n        uint256 price;\\n    }\\n\\n    event OrderPlaced(\\n        address indexed owner,\\n        address indexed tokenAddress,\\n        uint256 amount,\\n        uint256 price,\\n        bool isBuyOrder\\n    );\\n    event OrderMatched(\\n        address indexed owner,\\n        address indexed traderMatched,\\n        address indexed tokenAddress,\\n        uint256 amount,\\n        uint256 price,\\n        bool isBuyOrder\\n    );\\n    event OrderCanceled(address indexed owner, address indexed tokenAddress, bool isBuyOrder);\\n\\n    UserOrder[] private _userSellOrders;\\n    UserOrder[] private _userBuyOrders;\\n    mapping(address => mapping(address => OrderDetail)) private _sellOrderDetailBook;\\n    mapping(address => mapping(address => OrderDetail)) private _buyOrderDetailBook;\\n\\n    /**\\n     * @dev Place a sell order to sell order book\\n     * Takes tokens from sender\\n     * Emits a {OrderPlaced} event\\n     */\\n    function placeSellOrder(address tokenAddress, uint256 amount, uint256 totalPrice) external {\\n        OrderDetail storage sellOrderDetailBook = _sellOrderDetailBook[msg.sender][tokenAddress];\\n        if (_isExistingOrder(sellOrderDetailBook)) revert TokenMarketplace__SellOrderExisted();\\n        IERC20Extended token = IERC20Extended(tokenAddress);\\n        uint256 price = _getPrice(token, amount, totalPrice);\\n\\n        if (token.allowance(msg.sender, address(this)) < amount)\\n            revert TokenMarketplace__InsufficientAllowance();\\n        IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount);\\n\\n        _userSellOrders.push(UserOrder(msg.sender, tokenAddress));\\n        sellOrderDetailBook.amount = amount;\\n        sellOrderDetailBook.price = price;\\n\\n        emit OrderPlaced(msg.sender, tokenAddress, amount, price, false);\\n\\n        _matchOrder(msg.sender, tokenAddress, false);\\n    }\\n\\n    /**\\n     * @dev Place a buy order to sell order book\\n     * Takes money from sender\\n     * Emits a {OrderPlaced} event\\n     */\\n    function placeBuyOrder(address tokenAddress, uint256 amount) external payable {\\n        OrderDetail storage buyOrderDetailBook = _buyOrderDetailBook[msg.sender][tokenAddress];\\n        if (_isExistingOrder(buyOrderDetailBook)) revert TokenMarketplace__BuyOrderExisted();\\n        IERC20Extended token = IERC20Extended(tokenAddress);\\n        uint256 price = _getPrice(token, amount, msg.value);\\n\\n        _userBuyOrders.push(UserOrder(msg.sender, tokenAddress));\\n        buyOrderDetailBook.amount = amount;\\n        buyOrderDetailBook.price = price;\\n\\n        emit OrderPlaced(msg.sender, tokenAddress, amount, price, true);\\n\\n        _matchOrder(msg.sender, tokenAddress, true);\\n    }\\n\\n    /**\\n     * @dev remove order out of order book and send back money or token to owner\\n     */\\n    function cancelOrder(address owner, address tokenAddress, bool isBuyOrder) external {\\n        if (msg.sender != owner) revert TokenMarketplace__NotOwner();\\n        UserOrder[] memory orderBook = isBuyOrder ? _userBuyOrders : _userSellOrders;\\n        OrderDetail memory orderDetailBook = isBuyOrder\\n            ? _buyOrderDetailBook[owner][tokenAddress]\\n            : _sellOrderDetailBook[owner][tokenAddress];\\n        if (!_isExistingOrder(orderDetailBook)) {\\n            if (isBuyOrder) revert TokenMarketplace__BuyOrderNotExist();\\n            else revert TokenMarketplace__SellOrderNotExist();\\n        }\\n\\n        uint256 index;\\n        for (index = 0; index < orderBook.length; index += 1) {\\n            if (orderBook[index].owner != owner || orderBook[index].tokenAddress != tokenAddress)\\n                continue;\\n\\n            if (isBuyOrder) {\\n                _transferBuyMoney(owner, owner, tokenAddress, orderDetailBook.amount);\\n            } else {\\n                _transferSaleToken(owner, tokenAddress, orderDetailBook.amount);\\n            }\\n            _removeOrder(owner, tokenAddress, orderBook, index, isBuyOrder);\\n            break;\\n        }\\n    }\\n\\n    /**\\n     * @dev return detail sell order\\n     */\\n    function getSellOrder(\\n        address owner,\\n        address tokenAddress\\n    ) external view returns (OrderDetail memory) {\\n        OrderDetail memory orderDetailBook = _sellOrderDetailBook[owner][tokenAddress];\\n        if (!_isExistingOrder(orderDetailBook)) revert TokenMarketplace__SellOrderNotExist();\\n        return orderDetailBook;\\n    }\\n\\n    /**\\n     * @dev return detail buy order\\n     */\\n    function getBuyOrder(\\n        address owner,\\n        address tokenAddress\\n    ) external view returns (OrderDetail memory) {\\n        OrderDetail memory orderDetailBook = _buyOrderDetailBook[owner][tokenAddress];\\n        if (!_isExistingOrder(orderDetailBook)) revert TokenMarketplace__BuyOrderNotExist();\\n        return orderDetailBook;\\n    }\\n\\n    /**\\n     * @dev check if order is still on orderbook\\n     */\\n    function isOnOrderBook(\\n        address owner,\\n        address tokenAddress,\\n        bool isBuyOrder\\n    ) external view returns (bool) {\\n        UserOrder[] memory userOrder = isBuyOrder ? _userBuyOrders : _userSellOrders;\\n        bool isOnOrder = false;\\n        for (uint256 index = 0; index < userOrder.length; index += 1) {\\n            UserOrder memory order = userOrder[index];\\n            if (order.owner != owner || order.tokenAddress != tokenAddress) continue;\\n            isOnOrder = true;\\n            break;\\n        }\\n        return isOnOrder;\\n    }\\n\\n    /**\\n     * @dev check if order is existing or not\\n     */\\n    function _isExistingOrder(OrderDetail memory orderDetailBook) internal pure returns (bool) {\\n        return orderDetailBook.price != 0 || orderDetailBook.amount != 0;\\n    }\\n\\n    /**\\n     * @dev simple order matching algorithm\\n     * Make buy and sell order with the same price matched\\n     * Loop until the amount token of order sent to equal 0 or no buy or sell order have the same price\\n     * Remove all order has amount=0 out of order book\\n     * Emit {OrderMatched} event\\n     */\\n    function _matchOrder(address owner, address tokenAddress, bool isBuyOrder) internal {\\n        OrderDetail storage order = isBuyOrder\\n            ? _buyOrderDetailBook[owner][tokenAddress]\\n            : _sellOrderDetailBook[owner][tokenAddress];\\n        UserOrder[] memory userOrders = isBuyOrder ? _userSellOrders : _userBuyOrders;\\n\\n        for (uint256 i = 0; i < userOrders.length; i += 1) {\\n            UserOrder memory potentialUserOrder = userOrders[i];\\n            OrderDetail memory potentialOrderMatch = isBuyOrder\\n                ? _sellOrderDetailBook[potentialUserOrder.owner][potentialUserOrder.tokenAddress]\\n                : _buyOrderDetailBook[potentialUserOrder.owner][potentialUserOrder.tokenAddress];\\n            if (order.price != potentialOrderMatch.price) continue;\\n\\n            uint256 tradeAmount = _getMininum(order.amount, potentialOrderMatch.amount);\\n            address buyer = isBuyOrder ? owner : potentialUserOrder.owner;\\n            address seller = isBuyOrder ? potentialUserOrder.owner : owner;\\n            _transferSaleToken(buyer, tokenAddress, tradeAmount);\\n            _transferBuyMoney(buyer, seller, tokenAddress, tradeAmount);\\n            if (isBuyOrder) {\\n                _sellOrderDetailBook[potentialUserOrder.owner][potentialUserOrder.tokenAddress]\\n                    .amount -= tradeAmount;\\n            } else {\\n                _buyOrderDetailBook[potentialUserOrder.owner][potentialUserOrder.tokenAddress]\\n                    .amount -= tradeAmount;\\n            }\\n            order.amount -= tradeAmount;\\n\\n            emit OrderMatched(\\n                owner,\\n                potentialUserOrder.owner,\\n                tokenAddress,\\n                tradeAmount,\\n                order.price,\\n                isBuyOrder\\n            );\\n            if (potentialOrderMatch.amount - tradeAmount == 0) {\\n                _removeOrder(potentialUserOrder.owner, tokenAddress, userOrders, i, !isBuyOrder);\\n            }\\n            if (order.amount == 0) {\\n                _removeOrder(\\n                    owner,\\n                    tokenAddress,\\n                    isBuyOrder ? _userBuyOrders : _userSellOrders,\\n                    0,\\n                    isBuyOrder\\n                );\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev remove Order from order book\\n     * Emit a {OrderCanceled} event\\n     */\\n    function _removeOrder(\\n        address owner,\\n        address tokenAddress,\\n        UserOrder[] memory orderBook,\\n        uint256 index,\\n        bool isBuyOrder\\n    ) internal {\\n        for (; index < orderBook.length; index += 1) {\\n            if (orderBook[index].owner != owner || orderBook[index].tokenAddress != tokenAddress)\\n                continue;\\n            // delete order\\n            UserOrder[] storage _orderBook = isBuyOrder ? _userBuyOrders : _userSellOrders;\\n            for (; index < orderBook.length - 1; index += 1) {\\n                _orderBook[index] = orderBook[index + 1];\\n            }\\n            delete _orderBook[orderBook.length - 1];\\n            _orderBook.pop();\\n\\n            if (isBuyOrder) {\\n                delete _buyOrderDetailBook[owner][tokenAddress];\\n            } else {\\n                delete _sellOrderDetailBook[owner][tokenAddress];\\n            }\\n            emit OrderCanceled(owner, tokenAddress, isBuyOrder);\\n            break;\\n        }\\n    }\\n\\n    /**\\n     * @dev transfer token with amount\\n     */\\n    function _transferSaleToken(address to, address tokenAddress, uint256 amount) internal {\\n        IERC20Extended(tokenAddress).transfer(to, amount);\\n    }\\n\\n    /**\\n     * @dev transfer money base on token amount and price in order book\\n     */\\n    function _transferBuyMoney(\\n        address owner,\\n        address to,\\n        address tokenAddress,\\n        uint amount\\n    ) internal {\\n        (bool callSuccess, ) = payable(to).call{\\n            value: _buyOrderDetailBook[owner][tokenAddress].price *\\n                (amount / (10 ** IERC20Extended(tokenAddress).decimals()))\\n        }(\\\"\\\");\\n        require(callSuccess);\\n    }\\n\\n    /**\\n     * @dev check msg.value is valid\\n     * Return price for each token base on amount\\n     */\\n    function _getPrice(\\n        IERC20Extended token,\\n        uint256 amount,\\n        uint256 totalPrice\\n    ) internal view returns (uint256) {\\n        if (amount < 0 || amount % (10 ** token.decimals()) != 0)\\n            revert TokenMarketplace__InsufficientAmount();\\n        uint256 _amount = amount / (10 ** token.decimals());\\n        if (totalPrice < 0 || totalPrice % _amount != 0) revert TokenMarketplace__InvalidPrice();\\n        return totalPrice / _amount;\\n    }\\n\\n    /**\\n     * @dev helper function return min between 2 numbers\\n     */\\n    function _getMininum(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x4fa9327ff3c06673189feab4daf77168c330a88903834b756b3c7daf32497071\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x608060405234801561001057600080fd5b50612786806100206000396000f3fe6080604052600436106100555760003560e01c806314dffde91461005a5780632bcafffd14610097578063640c3679146100d457806376e86a9a14610111578063b6265ec31461013a578063f437b29b14610156575b600080fd5b34801561006657600080fd5b50610081600480360381019061007c9190611fe5565b61017f565b60405161008e919061206d565b60405180910390f35b3480156100a357600080fd5b506100be60048036038101906100b991906120c0565b61026f565b6040516100cb9190612122565b60405180910390f35b3480156100e057600080fd5b506100fb60048036038101906100f69190611fe5565b610456565b604051610108919061206d565b60405180910390f35b34801561011d57600080fd5b50610138600480360381019061013391906120c0565b610546565b005b610154600480360381019061014f9190612169565b610969565b005b34801561016257600080fd5b5061017d600480360381019061017891906121a9565b610be7565b005b610187611f68565b6000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050905061022f81610f9c565b610265576040517fd80c329700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8091505092915050565b6000808261027e576000610281565b60015b805480602002602001604051908101604052809291908181526020016000905b8282101561037f57838290600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050815260200190600101906102a1565b5050505090506000805b82518110156104495760008382815181106103a7576103a66121fc565b5b602002602001015190508773ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614158061042057508673ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1614155b1561042b5750610435565b6001925050610449565b600181610442919061225a565b9050610389565b5080925050509392505050565b61045e611f68565b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050905061050681610f9c565b61053c576040517fb915a49100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8091505092915050565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105ab576040517f7c76691600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000816105b95760006105bc565b60015b805480602002602001604051908101604052809291908181526020016000905b828210156106ba57838290600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050815260200190600101906105dc565b50505050905060008261074857600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206107c5565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205b6040518060400160405290816000820154815260200160018201548152505090506107ef81610f9c565b61085d57821561082b576040517fb915a49100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fd80c329700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8251811015610961578573ffffffffffffffffffffffffffffffffffffffff16838281518110610893576108926121fc565b5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1614158061090c57508473ffffffffffffffffffffffffffffffffffffffff168382815181106108e7576108e66121fc565b5b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff1614155b61094d57831561092b576109268687878560000151610fbd565b61093b565b61093a86868460000151611149565b5b61094886868584886111cd565b610961565b60018161095a919061225a565b9050610860565b505050505050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610a118160405180604001604052908160008201548152602001600182015481525050610f9c565b15610a48576040517f787ee7b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008390506000610a5a82853461163b565b9050600160405180604001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050508383600001819055508083600101819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fcdc1376319b8668d71932899a09da0a09a630ba01bf9736b0c291f308412416486846001604051610bcc9392919061229d565b60405180910390a3610be0338660016117fa565b5050505050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610c8f8160405180604001604052908160008201548152602001600182015481525050610f9c565b15610cc6576040517f5106a74a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008490506000610cd882868661163b565b9050848273ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401610d169291906122e3565b602060405180830381865afa158015610d33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d579190612321565b1015610d8f576040517ffa33d36b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b8152600401610dcc9392919061234e565b6020604051808303816000875af1158015610deb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0f919061239a565b50600060405180604001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050508483600001819055508083600101819055508573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fcdc1376319b8668d71932899a09da0a09a630ba01bf9736b0c291f308412416487846000604051610f809392919061229d565b60405180910390a3610f94338760006117fa565b505050505050565b6000808260200151141580610fb657506000826000015114155b9050919050565b60008373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611021573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110459190612400565b600a6110519190612560565b8361105c91906125da565b600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546110e6919061260b565b6040516110f29061267e565b60006040518083038185875af1925050503d806000811461112f576040519150601f19603f3d011682016040523d82523d6000602084013e611134565b606091505b505090508061114257600080fd5b5050505050565b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff1660e01b8152600401611184929190612693565b6020604051808303816000875af11580156111a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c7919061239a565b50505050565b5b8251821015611634578473ffffffffffffffffffffffffffffffffffffffff16838381518110611201576112006121fc565b5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1614158061127a57508373ffffffffffffffffffffffffffffffffffffffff16838381518110611255576112546121fc565b5b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff1614155b6116205760008161128c57600061128f565b60015b90505b600184516112a091906126bc565b83101561139457836001846112b5919061225a565b815181106112c6576112c56121fc565b5b60200260200101518184815481106112e1576112e06121fc565b5b906000526020600020906002020160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505060018361138d919061225a565b9250611292565b80600185516113a391906126bc565b815481106113b4576113b36121fc565b5b9060005260206000209060020201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055505080805480611424576114236126f0565b5b6001900381819060005260206000209060020201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550509055811561152557600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160009055600182016000905550506115b5565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160009055600182016000905550505b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f15b7f24660ad5eea79a12fdea20c1de15711c8124507a0a6e5bd3103e7953639846040516116129190612122565b60405180910390a350611634565b60018261162d919061225a565b91506111ce565b5050505050565b6000808310806116d1575060008473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611693573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b79190612400565b600a6116c39190612560565b846116ce919061271f565b14155b15611708576040517faa41083400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611755573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117799190612400565b600a6117859190612560565b8461179091906125da565b905060008310806117ad5750600081846117aa919061271f565b14155b156117e4576040517f221fd0b200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80836117f091906125da565b9150509392505050565b60008161188257600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206118ff565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205b905060008261190f576001611912565b60005b805480602002602001604051908101604052809291908181526020016000905b82821015611a1057838290600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505081526020019060010190611932565b50505050905060005b8151811015611f47576000828281518110611a3757611a366121fc565b5b60200260200101519050600085611ad15760036000836000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611b56565b60026000836000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205b6040518060400160405290816000820154815260200160018201548152505090508060200151856001015414611b8d575050611f33565b6000611ba186600001548360000151611f4f565b9050600087611bb4578360000151611bb6565b895b9050600088611bc5578a611bcb565b84600001515b9050611bd8828b85611149565b611be482828c86610fbd565b8815611c8d578260026000876000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000876020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254611c8191906126bc565b92505081905550611d2c565b8260036000876000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000876020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254611d2491906126bc565b925050819055505b82886000016000828254611d4091906126bc565b925050819055508973ffffffffffffffffffffffffffffffffffffffff16856000015173ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff167ff5940951125ac54a49908df6abba8d459967e5b8c77ac29b071d53e62cca8382868c600101548e604051611dc79392919061229d565b60405180910390a46000838560000151611de191906126bc565b03611df957611df885600001518b89898d156111cd565b5b6000886000015403611f2d57611f238b8b8b611e16576000611e19565b60015b805480602002602001604051908101604052809291908181526020016000905b82821015611f1757838290600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505081526020019060010190611e39565b5050505060008d6111cd565b5050505050611f47565b50505050505b600181611f40919061225a565b9050611a19565b505050505050565b6000818310611f5e5781611f60565b825b905092915050565b604051806040016040528060008152602001600081525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611fb282611f87565b9050919050565b611fc281611fa7565b8114611fcd57600080fd5b50565b600081359050611fdf81611fb9565b92915050565b60008060408385031215611ffc57611ffb611f82565b5b600061200a85828601611fd0565b925050602061201b85828601611fd0565b9150509250929050565b6000819050919050565b61203881612025565b82525050565b604082016000820151612054600085018261202f565b506020820151612067602085018261202f565b50505050565b6000604082019050612082600083018461203e565b92915050565b60008115159050919050565b61209d81612088565b81146120a857600080fd5b50565b6000813590506120ba81612094565b92915050565b6000806000606084860312156120d9576120d8611f82565b5b60006120e786828701611fd0565b93505060206120f886828701611fd0565b9250506040612109868287016120ab565b9150509250925092565b61211c81612088565b82525050565b60006020820190506121376000830184612113565b92915050565b61214681612025565b811461215157600080fd5b50565b6000813590506121638161213d565b92915050565b600080604083850312156121805761217f611f82565b5b600061218e85828601611fd0565b925050602061219f85828601612154565b9150509250929050565b6000806000606084860312156121c2576121c1611f82565b5b60006121d086828701611fd0565b93505060206121e186828701612154565b92505060406121f286828701612154565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061226582612025565b915061227083612025565b92508282019050808211156122885761228761222b565b5b92915050565b61229781612025565b82525050565b60006060820190506122b2600083018661228e565b6122bf602083018561228e565b6122cc6040830184612113565b949350505050565b6122dd81611fa7565b82525050565b60006040820190506122f860008301856122d4565b61230560208301846122d4565b9392505050565b60008151905061231b8161213d565b92915050565b60006020828403121561233757612336611f82565b5b60006123458482850161230c565b91505092915050565b600060608201905061236360008301866122d4565b61237060208301856122d4565b61237d604083018461228e565b949350505050565b60008151905061239481612094565b92915050565b6000602082840312156123b0576123af611f82565b5b60006123be84828501612385565b91505092915050565b600060ff82169050919050565b6123dd816123c7565b81146123e857600080fd5b50565b6000815190506123fa816123d4565b92915050565b60006020828403121561241657612415611f82565b5b6000612424848285016123eb565b91505092915050565b60008160011c9050919050565b6000808291508390505b6001851115612484578086048111156124605761245f61222b565b5b600185161561246f5780820291505b808102905061247d8561242d565b9450612444565b94509492505050565b60008261249d5760019050612559565b816124ab5760009050612559565b81600181146124c157600281146124cb576124fa565b6001915050612559565b60ff8411156124dd576124dc61222b565b5b8360020a9150848211156124f4576124f361222b565b5b50612559565b5060208310610133831016604e8410600b841016171561252f5782820a90508381111561252a5761252961222b565b5b612559565b61253c848484600161243a565b925090508184048111156125535761255261222b565b5b81810290505b9392505050565b600061256b82612025565b9150612576836123c7565b92506125a37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461248d565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006125e582612025565b91506125f083612025565b925082612600576125ff6125ab565b5b828204905092915050565b600061261682612025565b915061262183612025565b925082820261262f81612025565b915082820484148315176126465761264561222b565b5b5092915050565b600081905092915050565b50565b600061266860008361264d565b915061267382612658565b600082019050919050565b60006126898261265b565b9150819050919050565b60006040820190506126a860008301856122d4565b6126b5602083018461228e565b9392505050565b60006126c782612025565b91506126d283612025565b92508282039050818111156126ea576126e961222b565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600061272a82612025565b915061273583612025565b925082612745576127446125ab565b5b82820690509291505056fea2646970667358221220a0e87ce086a5e909a3f9358314077f4f86c505372c7c6f264a221a79c6477e1e64736f6c63430008120033",
    "deployedBytecode": "0x6080604052600436106100555760003560e01c806314dffde91461005a5780632bcafffd14610097578063640c3679146100d457806376e86a9a14610111578063b6265ec31461013a578063f437b29b14610156575b600080fd5b34801561006657600080fd5b50610081600480360381019061007c9190611fe5565b61017f565b60405161008e919061206d565b60405180910390f35b3480156100a357600080fd5b506100be60048036038101906100b991906120c0565b61026f565b6040516100cb9190612122565b60405180910390f35b3480156100e057600080fd5b506100fb60048036038101906100f69190611fe5565b610456565b604051610108919061206d565b60405180910390f35b34801561011d57600080fd5b50610138600480360381019061013391906120c0565b610546565b005b610154600480360381019061014f9190612169565b610969565b005b34801561016257600080fd5b5061017d600480360381019061017891906121a9565b610be7565b005b610187611f68565b6000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050905061022f81610f9c565b610265576040517fd80c329700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8091505092915050565b6000808261027e576000610281565b60015b805480602002602001604051908101604052809291908181526020016000905b8282101561037f57838290600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050815260200190600101906102a1565b5050505090506000805b82518110156104495760008382815181106103a7576103a66121fc565b5b602002602001015190508773ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614158061042057508673ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1614155b1561042b5750610435565b6001925050610449565b600181610442919061225a565b9050610389565b5080925050509392505050565b61045e611f68565b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050905061050681610f9c565b61053c576040517fb915a49100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8091505092915050565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105ab576040517f7c76691600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000816105b95760006105bc565b60015b805480602002602001604051908101604052809291908181526020016000905b828210156106ba57838290600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050815260200190600101906105dc565b50505050905060008261074857600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206107c5565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205b6040518060400160405290816000820154815260200160018201548152505090506107ef81610f9c565b61085d57821561082b576040517fb915a49100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fd80c329700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8251811015610961578573ffffffffffffffffffffffffffffffffffffffff16838281518110610893576108926121fc565b5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1614158061090c57508473ffffffffffffffffffffffffffffffffffffffff168382815181106108e7576108e66121fc565b5b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff1614155b61094d57831561092b576109268687878560000151610fbd565b61093b565b61093a86868460000151611149565b5b61094886868584886111cd565b610961565b60018161095a919061225a565b9050610860565b505050505050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610a118160405180604001604052908160008201548152602001600182015481525050610f9c565b15610a48576040517f787ee7b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008390506000610a5a82853461163b565b9050600160405180604001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050508383600001819055508083600101819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fcdc1376319b8668d71932899a09da0a09a630ba01bf9736b0c291f308412416486846001604051610bcc9392919061229d565b60405180910390a3610be0338660016117fa565b5050505050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610c8f8160405180604001604052908160008201548152602001600182015481525050610f9c565b15610cc6576040517f5106a74a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008490506000610cd882868661163b565b9050848273ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401610d169291906122e3565b602060405180830381865afa158015610d33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d579190612321565b1015610d8f576040517ffa33d36b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b8152600401610dcc9392919061234e565b6020604051808303816000875af1158015610deb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0f919061239a565b50600060405180604001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050508483600001819055508083600101819055508573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fcdc1376319b8668d71932899a09da0a09a630ba01bf9736b0c291f308412416487846000604051610f809392919061229d565b60405180910390a3610f94338760006117fa565b505050505050565b6000808260200151141580610fb657506000826000015114155b9050919050565b60008373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611021573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110459190612400565b600a6110519190612560565b8361105c91906125da565b600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546110e6919061260b565b6040516110f29061267e565b60006040518083038185875af1925050503d806000811461112f576040519150601f19603f3d011682016040523d82523d6000602084013e611134565b606091505b505090508061114257600080fd5b5050505050565b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff1660e01b8152600401611184929190612693565b6020604051808303816000875af11580156111a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c7919061239a565b50505050565b5b8251821015611634578473ffffffffffffffffffffffffffffffffffffffff16838381518110611201576112006121fc565b5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1614158061127a57508373ffffffffffffffffffffffffffffffffffffffff16838381518110611255576112546121fc565b5b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff1614155b6116205760008161128c57600061128f565b60015b90505b600184516112a091906126bc565b83101561139457836001846112b5919061225a565b815181106112c6576112c56121fc565b5b60200260200101518184815481106112e1576112e06121fc565b5b906000526020600020906002020160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505060018361138d919061225a565b9250611292565b80600185516113a391906126bc565b815481106113b4576113b36121fc565b5b9060005260206000209060020201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055505080805480611424576114236126f0565b5b6001900381819060005260206000209060020201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550509055811561152557600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160009055600182016000905550506115b5565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160009055600182016000905550505b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f15b7f24660ad5eea79a12fdea20c1de15711c8124507a0a6e5bd3103e7953639846040516116129190612122565b60405180910390a350611634565b60018261162d919061225a565b91506111ce565b5050505050565b6000808310806116d1575060008473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611693573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b79190612400565b600a6116c39190612560565b846116ce919061271f565b14155b15611708576040517faa41083400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611755573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117799190612400565b600a6117859190612560565b8461179091906125da565b905060008310806117ad5750600081846117aa919061271f565b14155b156117e4576040517f221fd0b200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80836117f091906125da565b9150509392505050565b60008161188257600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206118ff565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205b905060008261190f576001611912565b60005b805480602002602001604051908101604052809291908181526020016000905b82821015611a1057838290600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505081526020019060010190611932565b50505050905060005b8151811015611f47576000828281518110611a3757611a366121fc565b5b60200260200101519050600085611ad15760036000836000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611b56565b60026000836000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205b6040518060400160405290816000820154815260200160018201548152505090508060200151856001015414611b8d575050611f33565b6000611ba186600001548360000151611f4f565b9050600087611bb4578360000151611bb6565b895b9050600088611bc5578a611bcb565b84600001515b9050611bd8828b85611149565b611be482828c86610fbd565b8815611c8d578260026000876000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000876020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254611c8191906126bc565b92505081905550611d2c565b8260036000876000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000876020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254611d2491906126bc565b925050819055505b82886000016000828254611d4091906126bc565b925050819055508973ffffffffffffffffffffffffffffffffffffffff16856000015173ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff167ff5940951125ac54a49908df6abba8d459967e5b8c77ac29b071d53e62cca8382868c600101548e604051611dc79392919061229d565b60405180910390a46000838560000151611de191906126bc565b03611df957611df885600001518b89898d156111cd565b5b6000886000015403611f2d57611f238b8b8b611e16576000611e19565b60015b805480602002602001604051908101604052809291908181526020016000905b82821015611f1757838290600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505081526020019060010190611e39565b5050505060008d6111cd565b5050505050611f47565b50505050505b600181611f40919061225a565b9050611a19565b505050505050565b6000818310611f5e5781611f60565b825b905092915050565b604051806040016040528060008152602001600081525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611fb282611f87565b9050919050565b611fc281611fa7565b8114611fcd57600080fd5b50565b600081359050611fdf81611fb9565b92915050565b60008060408385031215611ffc57611ffb611f82565b5b600061200a85828601611fd0565b925050602061201b85828601611fd0565b9150509250929050565b6000819050919050565b61203881612025565b82525050565b604082016000820151612054600085018261202f565b506020820151612067602085018261202f565b50505050565b6000604082019050612082600083018461203e565b92915050565b60008115159050919050565b61209d81612088565b81146120a857600080fd5b50565b6000813590506120ba81612094565b92915050565b6000806000606084860312156120d9576120d8611f82565b5b60006120e786828701611fd0565b93505060206120f886828701611fd0565b9250506040612109868287016120ab565b9150509250925092565b61211c81612088565b82525050565b60006020820190506121376000830184612113565b92915050565b61214681612025565b811461215157600080fd5b50565b6000813590506121638161213d565b92915050565b600080604083850312156121805761217f611f82565b5b600061218e85828601611fd0565b925050602061219f85828601612154565b9150509250929050565b6000806000606084860312156121c2576121c1611f82565b5b60006121d086828701611fd0565b93505060206121e186828701612154565b92505060406121f286828701612154565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061226582612025565b915061227083612025565b92508282019050808211156122885761228761222b565b5b92915050565b61229781612025565b82525050565b60006060820190506122b2600083018661228e565b6122bf602083018561228e565b6122cc6040830184612113565b949350505050565b6122dd81611fa7565b82525050565b60006040820190506122f860008301856122d4565b61230560208301846122d4565b9392505050565b60008151905061231b8161213d565b92915050565b60006020828403121561233757612336611f82565b5b60006123458482850161230c565b91505092915050565b600060608201905061236360008301866122d4565b61237060208301856122d4565b61237d604083018461228e565b949350505050565b60008151905061239481612094565b92915050565b6000602082840312156123b0576123af611f82565b5b60006123be84828501612385565b91505092915050565b600060ff82169050919050565b6123dd816123c7565b81146123e857600080fd5b50565b6000815190506123fa816123d4565b92915050565b60006020828403121561241657612415611f82565b5b6000612424848285016123eb565b91505092915050565b60008160011c9050919050565b6000808291508390505b6001851115612484578086048111156124605761245f61222b565b5b600185161561246f5780820291505b808102905061247d8561242d565b9450612444565b94509492505050565b60008261249d5760019050612559565b816124ab5760009050612559565b81600181146124c157600281146124cb576124fa565b6001915050612559565b60ff8411156124dd576124dc61222b565b5b8360020a9150848211156124f4576124f361222b565b5b50612559565b5060208310610133831016604e8410600b841016171561252f5782820a90508381111561252a5761252961222b565b5b612559565b61253c848484600161243a565b925090508184048111156125535761255261222b565b5b81810290505b9392505050565b600061256b82612025565b9150612576836123c7565b92506125a37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461248d565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006125e582612025565b91506125f083612025565b925082612600576125ff6125ab565b5b828204905092915050565b600061261682612025565b915061262183612025565b925082820261262f81612025565b915082820484148315176126465761264561222b565b5b5092915050565b600081905092915050565b50565b600061266860008361264d565b915061267382612658565b600082019050919050565b60006126898261265b565b9150819050919050565b60006040820190506126a860008301856122d4565b6126b5602083018461228e565b9392505050565b60006126c782612025565b91506126d283612025565b92508282039050818111156126ea576126e961222b565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600061272a82612025565b915061273583612025565b925082612745576127446125ab565b5b82820690509291505056fea2646970667358221220a0e87ce086a5e909a3f9358314077f4f86c505372c7c6f264a221a79c6477e1e64736f6c63430008120033",
    "devdoc": {
        "author": "Chuong Thai",
        "kind": "dev",
        "methods": {
            "cancelOrder(address,address,bool)": {
                "details": "remove order out of order book and send back money or token to owner"
            },
            "getBuyOrder(address,address)": {
                "details": "return detail buy order"
            },
            "getSellOrder(address,address)": {
                "details": "return detail sell order"
            },
            "isOnOrderBook(address,address,bool)": {
                "details": "check if order is still on orderbook"
            },
            "placeBuyOrder(address,uint256)": {
                "details": "Place a buy order to sell order book Takes money from sender Emits a {OrderPlaced} event"
            },
            "placeSellOrder(address,uint256,uint256)": {
                "details": "Place a sell order to sell order book Takes tokens from sender Emits a {OrderPlaced} event"
            }
        },
        "title": "A simple version of token marketplace",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {},
        "notice": "This contract for creating a token marketplace with simple order matching algorithm",
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 156,
                "contract": "contracts/TokenMarketplace.sol:TokenMarketplace",
                "label": "_userSellOrders",
                "offset": 0,
                "slot": "0",
                "type": "t_array(t_struct(UserOrder)113_storage)dyn_storage"
            },
            {
                "astId": 160,
                "contract": "contracts/TokenMarketplace.sol:TokenMarketplace",
                "label": "_userBuyOrders",
                "offset": 0,
                "slot": "1",
                "type": "t_array(t_struct(UserOrder)113_storage)dyn_storage"
            },
            {
                "astId": 167,
                "contract": "contracts/TokenMarketplace.sol:TokenMarketplace",
                "label": "_sellOrderDetailBook",
                "offset": 0,
                "slot": "2",
                "type": "t_mapping(t_address,t_mapping(t_address,t_struct(OrderDetail)118_storage))"
            },
            {
                "astId": 174,
                "contract": "contracts/TokenMarketplace.sol:TokenMarketplace",
                "label": "_buyOrderDetailBook",
                "offset": 0,
                "slot": "3",
                "type": "t_mapping(t_address,t_mapping(t_address,t_struct(OrderDetail)118_storage))"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_struct(UserOrder)113_storage)dyn_storage": {
                "base": "t_struct(UserOrder)113_storage",
                "encoding": "dynamic_array",
                "label": "struct TokenMarketplace.UserOrder[]",
                "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_struct(OrderDetail)118_storage))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(address => struct TokenMarketplace.OrderDetail))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_address,t_struct(OrderDetail)118_storage)"
            },
            "t_mapping(t_address,t_struct(OrderDetail)118_storage)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => struct TokenMarketplace.OrderDetail)",
                "numberOfBytes": "32",
                "value": "t_struct(OrderDetail)118_storage"
            },
            "t_struct(OrderDetail)118_storage": {
                "encoding": "inplace",
                "label": "struct TokenMarketplace.OrderDetail",
                "members": [
                    {
                        "astId": 115,
                        "contract": "contracts/TokenMarketplace.sol:TokenMarketplace",
                        "label": "amount",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 117,
                        "contract": "contracts/TokenMarketplace.sol:TokenMarketplace",
                        "label": "price",
                        "offset": 0,
                        "slot": "1",
                        "type": "t_uint256"
                    }
                ],
                "numberOfBytes": "64"
            },
            "t_struct(UserOrder)113_storage": {
                "encoding": "inplace",
                "label": "struct TokenMarketplace.UserOrder",
                "members": [
                    {
                        "astId": 110,
                        "contract": "contracts/TokenMarketplace.sol:TokenMarketplace",
                        "label": "owner",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_address"
                    },
                    {
                        "astId": 112,
                        "contract": "contracts/TokenMarketplace.sol:TokenMarketplace",
                        "label": "tokenAddress",
                        "offset": 0,
                        "slot": "1",
                        "type": "t_address"
                    }
                ],
                "numberOfBytes": "64"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
