{
    "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "abi": [
        {
            "inputs": [],
            "name": "TokenMarketplace__BuyOrderExisted",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "TokenMarketplace__BuyOrderNotExist",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "TokenMarketplace__InsufficientAllowance",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "TokenMarketplace__InsufficientAmount",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "TokenMarketplace__InvalidIndex",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "TokenMarketplace__InvalidPrice",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "TokenMarketplace__NotOwner",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "TokenMarketplace__SellOrderExisted",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "TokenMarketplace__SellOrderNotExist",
            "type": "error"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "tokenAddress",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "bool",
                    "name": "isBuyOrder",
                    "type": "bool"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "timestamp",
                    "type": "uint256"
                }
            ],
            "name": "OrderCanceled",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "traderMatched",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "tokenAddress",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "price",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "bool",
                    "name": "isBuyOrder",
                    "type": "bool"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "timestamp",
                    "type": "uint256"
                }
            ],
            "name": "OrderMatched",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "tokenAddress",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "price",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "bool",
                    "name": "isBuyOrder",
                    "type": "bool"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "timestamp",
                    "type": "uint256"
                }
            ],
            "name": "OrderPlaced",
            "type": "event"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "tokenAddress",
                    "type": "address"
                },
                {
                    "internalType": "bool",
                    "name": "isBuyOrder",
                    "type": "bool"
                }
            ],
            "name": "cancelOrder",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getBuyOrderCount",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "tokenAddress",
                    "type": "address"
                }
            ],
            "name": "getDetailBuyOrder",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "amount",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "price",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct TokenMarketplace.OrderDetail",
                    "name": "",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "tokenAddress",
                    "type": "address"
                }
            ],
            "name": "getDetailSellOrder",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "amount",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "price",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct TokenMarketplace.OrderDetail",
                    "name": "",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getSellOrderCount",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "orderIndex",
                    "type": "uint256"
                },
                {
                    "internalType": "bool",
                    "name": "isBuyOrder",
                    "type": "bool"
                }
            ],
            "name": "getUserOrder",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "address",
                            "name": "owner",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "tokenAddress",
                            "type": "address"
                        }
                    ],
                    "internalType": "struct TokenMarketplace.UserOrder",
                    "name": "",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "tokenAddress",
                    "type": "address"
                },
                {
                    "internalType": "bool",
                    "name": "isBuyOrder",
                    "type": "bool"
                }
            ],
            "name": "isOnOrderBook",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "tokenAddress",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "placeBuyOrder",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "tokenAddress",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "totalPrice",
                    "type": "uint256"
                }
            ],
            "name": "placeSellOrder",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ],
    "transactionHash": "0x22bb12ae32d689d32660fb4c8474eb3fa3a6cdae2dbd2717b9a4cd1b73d020b4",
    "receipt": {
        "to": null,
        "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
        "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "transactionIndex": 0,
        "gasUsed": "2288071",
        "logsBloom": "0x
        "blockHash": "0x241a84f871a4421512dc88e65bcf8e2894cf9e3633065cee01af090c8b054750",
        "transactionHash": "0x22bb12ae32d689d32660fb4c8474eb3fa3a6cdae2dbd2717b9a4cd1b73d020b4",
        "logs": [],
        "blockNumber": 2,
        "cumulativeGasUsed": "2288071",
        "status": 1,
        "byzantium": true
    },
    "args": [],
    "numDeployments": 1,
    "solcInputHash": "0941115027453bacdc9747197a897e6c",
    "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"TokenMarketplace__BuyOrderExisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenMarketplace__BuyOrderNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenMarketplace__InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenMarketplace__InsufficientAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenMarketplace__InvalidIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenMarketplace__InvalidPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenMarketplace__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenMarketplace__SellOrderExisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenMarketplace__SellOrderNotExist\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBuyOrder\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OrderCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"traderMatched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBuyOrder\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OrderMatched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBuyOrder\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OrderPlaced\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBuyOrder\",\"type\":\"bool\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyOrderCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getDetailBuyOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenMarketplace.OrderDetail\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getDetailSellOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenMarketplace.OrderDetail\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellOrderCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isBuyOrder\",\"type\":\"bool\"}],\"name\":\"getUserOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct TokenMarketplace.UserOrder\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBuyOrder\",\"type\":\"bool\"}],\"name\":\"isOnOrderBook\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"placeBuyOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPrice\",\"type\":\"uint256\"}],\"name\":\"placeSellOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Chuong Thai\",\"kind\":\"dev\",\"methods\":{\"cancelOrder(address,address,bool)\":{\"details\":\"remove order out of order book and send back money or token to owner\"},\"getBuyOrderCount()\":{\"details\":\"return number of buy order\"},\"getDetailBuyOrder(address,address)\":{\"details\":\"return detail buy order\"},\"getDetailSellOrder(address,address)\":{\"details\":\"return detail sell order\"},\"getSellOrderCount()\":{\"details\":\"return number of sell order\"},\"getUserOrder(uint256,bool)\":{\"details\":\"return user order\"},\"isOnOrderBook(address,address,bool)\":{\"details\":\"check if order is still on orderbook\"},\"placeBuyOrder(address,uint256)\":{\"details\":\"Place a buy order to sell order book Takes money from sender Emits a {OrderPlaced} event\"},\"placeSellOrder(address,uint256,uint256)\":{\"details\":\"Place a sell order to sell order book Takes tokens from sender Emits a {OrderPlaced} event\"}},\"title\":\"A simple version of token marketplace\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract for creating a token marketplace with simple order matching algorithm\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenMarketplace.sol\":\"TokenMarketplace\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Extended is IERC20 {\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x9dd9bbd60865cdfefa49e546230f82e655f465055e1061f0ccfe0e322a606533\",\"license\":\"MIT\"},\"contracts/TokenMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Extended.sol\\\";\\n\\nerror TokenMarketplace__InsufficientAmount();\\nerror TokenMarketplace__InvalidPrice();\\nerror TokenMarketplace__InsufficientAllowance();\\nerror TokenMarketplace__NotOwner();\\nerror TokenMarketplace__SellOrderExisted();\\nerror TokenMarketplace__BuyOrderExisted();\\nerror TokenMarketplace__BuyOrderNotExist();\\nerror TokenMarketplace__SellOrderNotExist();\\nerror TokenMarketplace__InvalidIndex();\\n\\n/**\\n * @title A simple version of token marketplace\\n * @author Chuong Thai\\n * @notice This contract for creating a token marketplace with simple order matching algorithm\\n */\\ncontract TokenMarketplace {\\n    struct UserOrder {\\n        address owner;\\n        address tokenAddress;\\n    }\\n    struct OrderDetail {\\n        uint256 amount;\\n        uint256 price;\\n    }\\n\\n    event OrderPlaced(\\n        address indexed owner,\\n        address indexed tokenAddress,\\n        uint256 amount,\\n        uint256 price,\\n        bool isBuyOrder,\\n        uint256 timestamp\\n    );\\n    event OrderMatched(\\n        address indexed owner,\\n        address indexed traderMatched,\\n        address indexed tokenAddress,\\n        uint256 amount,\\n        uint256 price,\\n        bool isBuyOrder,\\n        uint256 timestamp\\n    );\\n    event OrderCanceled(\\n        address indexed owner,\\n        address indexed tokenAddress,\\n        bool isBuyOrder,\\n        uint256 timestamp\\n    );\\n\\n    UserOrder[] private _userSellOrders;\\n    UserOrder[] private _userBuyOrders;\\n    mapping(address => mapping(address => OrderDetail)) private _sellOrderDetailBook;\\n    mapping(address => mapping(address => OrderDetail)) private _buyOrderDetailBook;\\n\\n    /**\\n     * @dev Place a sell order to sell order book\\n     * Takes tokens from sender\\n     * Emits a {OrderPlaced} event\\n     */\\n    function placeSellOrder(address tokenAddress, uint256 amount, uint256 totalPrice) external {\\n        OrderDetail storage sellOrderDetailBook = _sellOrderDetailBook[msg.sender][tokenAddress];\\n        if (_isExistingOrder(sellOrderDetailBook)) revert TokenMarketplace__SellOrderExisted();\\n        IERC20Extended token = IERC20Extended(tokenAddress);\\n        uint256 price = _getPrice(token, amount, totalPrice);\\n\\n        if (token.allowance(msg.sender, address(this)) < amount)\\n            revert TokenMarketplace__InsufficientAllowance();\\n        IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount);\\n\\n        _userSellOrders.push(UserOrder(msg.sender, tokenAddress));\\n        sellOrderDetailBook.amount = amount;\\n        sellOrderDetailBook.price = price;\\n\\n        emit OrderPlaced(msg.sender, tokenAddress, amount, price, false, block.timestamp);\\n\\n        _matchOrder(msg.sender, tokenAddress, false);\\n    }\\n\\n    /**\\n     * @dev Place a buy order to sell order book\\n     * Takes money from sender\\n     * Emits a {OrderPlaced} event\\n     */\\n    function placeBuyOrder(address tokenAddress, uint256 amount) external payable {\\n        OrderDetail storage buyOrderDetailBook = _buyOrderDetailBook[msg.sender][tokenAddress];\\n        if (_isExistingOrder(buyOrderDetailBook)) revert TokenMarketplace__BuyOrderExisted();\\n        IERC20Extended token = IERC20Extended(tokenAddress);\\n        uint256 price = _getPrice(token, amount, msg.value);\\n\\n        _userBuyOrders.push(UserOrder(msg.sender, tokenAddress));\\n        buyOrderDetailBook.amount = amount;\\n        buyOrderDetailBook.price = price;\\n\\n        emit OrderPlaced(msg.sender, tokenAddress, amount, price, true, block.timestamp);\\n\\n        _matchOrder(msg.sender, tokenAddress, true);\\n    }\\n\\n    /**\\n     * @dev remove order out of order book and send back money or token to owner\\n     */\\n    function cancelOrder(address owner, address tokenAddress, bool isBuyOrder) external {\\n        if (msg.sender != owner) revert TokenMarketplace__NotOwner();\\n        UserOrder[] memory orderBook = isBuyOrder ? _userBuyOrders : _userSellOrders;\\n        OrderDetail memory orderDetailBook = isBuyOrder\\n            ? _buyOrderDetailBook[owner][tokenAddress]\\n            : _sellOrderDetailBook[owner][tokenAddress];\\n        if (!_isExistingOrder(orderDetailBook)) {\\n            if (isBuyOrder) revert TokenMarketplace__BuyOrderNotExist();\\n            else revert TokenMarketplace__SellOrderNotExist();\\n        }\\n\\n        for (uint256 index = 0; index < orderBook.length; index += 1) {\\n            if (orderBook[index].owner != owner || orderBook[index].tokenAddress != tokenAddress)\\n                continue;\\n\\n            if (isBuyOrder) {\\n                _transferBuyMoney(owner, owner, tokenAddress, orderDetailBook.amount);\\n            } else {\\n                _transferSaleToken(owner, tokenAddress, orderDetailBook.amount);\\n            }\\n            _removeOrder(owner, tokenAddress, orderBook, index, isBuyOrder);\\n            break;\\n        }\\n    }\\n\\n    /**\\n     * @dev return detail sell order\\n     */\\n    function getDetailSellOrder(\\n        address owner,\\n        address tokenAddress\\n    ) external view returns (OrderDetail memory) {\\n        OrderDetail memory orderDetailBook = _sellOrderDetailBook[owner][tokenAddress];\\n        if (!_isExistingOrder(orderDetailBook)) revert TokenMarketplace__SellOrderNotExist();\\n        return orderDetailBook;\\n    }\\n\\n    /**\\n     * @dev return detail buy order\\n     */\\n    function getDetailBuyOrder(\\n        address owner,\\n        address tokenAddress\\n    ) external view returns (OrderDetail memory) {\\n        OrderDetail memory orderDetailBook = _buyOrderDetailBook[owner][tokenAddress];\\n        if (!_isExistingOrder(orderDetailBook)) revert TokenMarketplace__BuyOrderNotExist();\\n        return orderDetailBook;\\n    }\\n\\n    /**\\n     * @dev return number of buy order\\n     */\\n    function getBuyOrderCount() external view returns (uint256) {\\n        return _userBuyOrders.length;\\n    }\\n\\n    /**\\n     * @dev return number of sell order\\n     */\\n    function getSellOrderCount() external view returns (uint256) {\\n        return _userSellOrders.length;\\n    }\\n\\n    /**\\n     * @dev return user order\\n     */\\n    function getUserOrder(\\n        uint256 orderIndex,\\n        bool isBuyOrder\\n    ) external view returns (UserOrder memory) {\\n        uint256 orderLength = isBuyOrder ? _userBuyOrders.length : _userSellOrders.length;\\n        if (orderIndex >= orderLength) revert TokenMarketplace__InvalidIndex();\\n        return isBuyOrder ? _userBuyOrders[orderIndex] : _userSellOrders[orderIndex];\\n    }\\n\\n    /**\\n     * @dev check if order is still on orderbook\\n     */\\n    function isOnOrderBook(\\n        address owner,\\n        address tokenAddress,\\n        bool isBuyOrder\\n    ) external view returns (bool) {\\n        UserOrder[] memory userOrder = isBuyOrder ? _userBuyOrders : _userSellOrders;\\n        bool isOnOrder = false;\\n        for (uint256 index = 0; index < userOrder.length; index += 1) {\\n            UserOrder memory order = userOrder[index];\\n            if (order.owner != owner || order.tokenAddress != tokenAddress) continue;\\n            isOnOrder = true;\\n            break;\\n        }\\n        return isOnOrder;\\n    }\\n\\n    /**\\n     * @dev check if order is existing or not\\n     */\\n    function _isExistingOrder(OrderDetail memory orderDetailBook) internal pure returns (bool) {\\n        return orderDetailBook.price != 0 || orderDetailBook.amount != 0;\\n    }\\n\\n    /**\\n     * @dev simple order matching algorithm\\n     * Make buy and sell order with the same price matched\\n     * Loop until the amount token of order sent to equal 0 or no buy or sell order have the same price\\n     * Remove all order has amount=0 out of order book\\n     * Emit {OrderMatched} event\\n     */\\n    function _matchOrder(address owner, address tokenAddress, bool isBuyOrder) internal {\\n        OrderDetail storage order = isBuyOrder\\n            ? _buyOrderDetailBook[owner][tokenAddress]\\n            : _sellOrderDetailBook[owner][tokenAddress];\\n        UserOrder[] memory userOrders = isBuyOrder ? _userSellOrders : _userBuyOrders;\\n\\n        for (uint256 i = 0; i < userOrders.length; i += 1) {\\n            UserOrder memory potentialUserOrder = userOrders[i];\\n            OrderDetail memory potentialOrderMatch = isBuyOrder\\n                ? _sellOrderDetailBook[potentialUserOrder.owner][potentialUserOrder.tokenAddress]\\n                : _buyOrderDetailBook[potentialUserOrder.owner][potentialUserOrder.tokenAddress];\\n            if (order.price != potentialOrderMatch.price) continue;\\n\\n            uint256 tradeAmount = _getMininum(order.amount, potentialOrderMatch.amount);\\n            address buyer = isBuyOrder ? owner : potentialUserOrder.owner;\\n            address seller = isBuyOrder ? potentialUserOrder.owner : owner;\\n            _transferSaleToken(buyer, tokenAddress, tradeAmount);\\n            _transferBuyMoney(buyer, seller, tokenAddress, tradeAmount);\\n\\n            unchecked {\\n                if (isBuyOrder) {\\n                    _sellOrderDetailBook[potentialUserOrder.owner][potentialUserOrder.tokenAddress]\\n                        .amount -= tradeAmount;\\n                } else {\\n                    _buyOrderDetailBook[potentialUserOrder.owner][potentialUserOrder.tokenAddress]\\n                        .amount -= tradeAmount;\\n                }\\n                order.amount -= tradeAmount;\\n            }\\n\\n            emit OrderMatched(\\n                owner,\\n                potentialUserOrder.owner,\\n                tokenAddress,\\n                tradeAmount,\\n                order.price,\\n                isBuyOrder,\\n                block.timestamp\\n            );\\n            if (potentialOrderMatch.amount - tradeAmount == 0) {\\n                _removeOrder(potentialUserOrder.owner, tokenAddress, userOrders, i, !isBuyOrder);\\n            }\\n            if (order.amount == 0) {\\n                _removeOrder(\\n                    owner,\\n                    tokenAddress,\\n                    isBuyOrder ? _userBuyOrders : _userSellOrders,\\n                    0,\\n                    isBuyOrder\\n                );\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev remove Order from order book\\n     * Emit a {OrderCanceled} event\\n     */\\n    function _removeOrder(\\n        address owner,\\n        address tokenAddress,\\n        UserOrder[] memory orderBook,\\n        uint256 index,\\n        bool isBuyOrder\\n    ) internal {\\n        for (; index < orderBook.length; index += 1) {\\n            if (orderBook[index].owner != owner || orderBook[index].tokenAddress != tokenAddress)\\n                continue;\\n            // delete order\\n            UserOrder[] storage _orderBook = isBuyOrder ? _userBuyOrders : _userSellOrders;\\n            for (; index < orderBook.length - 1; index += 1) {\\n                _orderBook[index] = orderBook[index + 1];\\n            }\\n            delete _orderBook[orderBook.length - 1];\\n            _orderBook.pop();\\n\\n            if (isBuyOrder) {\\n                delete _buyOrderDetailBook[owner][tokenAddress];\\n            } else {\\n                delete _sellOrderDetailBook[owner][tokenAddress];\\n            }\\n            emit OrderCanceled(owner, tokenAddress, isBuyOrder, block.timestamp);\\n            break;\\n        }\\n    }\\n\\n    /**\\n     * @dev transfer token with amount\\n     */\\n    function _transferSaleToken(address to, address tokenAddress, uint256 amount) internal {\\n        IERC20Extended(tokenAddress).transfer(to, amount);\\n    }\\n\\n    /**\\n     * @dev transfer money base on token amount and price in order book\\n     */\\n    function _transferBuyMoney(\\n        address owner,\\n        address to,\\n        address tokenAddress,\\n        uint amount\\n    ) internal {\\n        uint256 totalPrice;\\n        unchecked {\\n            totalPrice =\\n                _buyOrderDetailBook[owner][tokenAddress].price *\\n                (amount / (10 ** IERC20Extended(tokenAddress).decimals()));\\n        }\\n        (bool callSuccess, ) = payable(to).call{value: totalPrice}(\\\"\\\");\\n        require(callSuccess);\\n    }\\n\\n    /**\\n     * @dev check msg.value is valid\\n     * Return price for each token base on amount\\n     */\\n    function _getPrice(\\n        IERC20Extended token,\\n        uint256 amount,\\n        uint256 totalPrice\\n    ) internal view returns (uint256) {\\n        uint256 decimals;\\n        unchecked {\\n            decimals = (10 ** token.decimals());\\n        }\\n        if (amount == 0 || amount % decimals != 0) revert TokenMarketplace__InsufficientAmount();\\n        uint256 _amount;\\n        unchecked {\\n            _amount = amount / decimals;\\n        }\\n        if (totalPrice == 0 || totalPrice % _amount != 0) revert TokenMarketplace__InvalidPrice();\\n        unchecked {\\n            return totalPrice / _amount;\\n        }\\n    }\\n\\n    /**\\n     * @dev helper function return min between 2 numbers\\n     */\\n    function _getMininum(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x57affff53b2d5d984d60cae4edc28c2f69623fdacfc15760e07679fb5e19c5e1\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x608060405234801561001057600080fd5b50612887806100206000396000f3fe6080604052600436106100865760003560e01c80632bcafffd116100595780632bcafffd1461015b578063684d35cf1461019857806376e86a9a146101d5578063b6265ec3146101fe578063f437b29b1461021a57610086565b8063022a11ea1461008b5780630528e57c146100c857806324aaf97f1461010557806329ce16bb14610130575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad91906121ec565b610243565b6040516100bf9190612274565b60405180910390f35b3480156100d457600080fd5b506100ef60048036038101906100ea91906121ec565b610333565b6040516100fc9190612274565b60405180910390f35b34801561011157600080fd5b5061011a610423565b604051610127919061229e565b60405180910390f35b34801561013c57600080fd5b5061014561042f565b604051610152919061229e565b60405180910390f35b34801561016757600080fd5b50610182600480360381019061017d91906122f1565b61043c565b60405161018f9190612353565b60405180910390f35b3480156101a457600080fd5b506101bf60048036038101906101ba919061239a565b610623565b6040516101cc9190612418565b60405180910390f35b3480156101e157600080fd5b506101fc60048036038101906101f791906122f1565b61078e565b005b61021860048036038101906102139190612433565b610bb1565b005b34801561022657600080fd5b50610241600480360381019061023c9190612473565b610e31565b005b61024b612129565b6000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090506102f3816111e8565b610329576040517fd80c329700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8091505092915050565b61033b612129565b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090506103e3816111e8565b610419576040517fb915a49100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8091505092915050565b60008080549050905090565b6000600180549050905090565b6000808261044b57600061044e565b60015b805480602002602001604051908101604052809291908181526020016000905b8282101561054c57838290600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250508152602001906001019061046e565b5050505090506000805b8251811015610616576000838281518110610574576105736124c6565b5b602002602001015190508773ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff161415806105ed57508673ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1614155b156105f85750610602565b6001925050610616565b60018161060f9190612524565b9050610556565b5080925050509392505050565b61062b612143565b60008261063d57600080549050610644565b6001805490505b905080841061067f576040517f5079a79700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b826106ab5760008481548110610698576106976124c6565b5b90600052602060002090600202016106ce565b600184815481106106bf576106be6124c6565b5b90600052602060002090600202015b6040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505091505092915050565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107f3576040517f7c76691600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081610801576000610804565b60015b805480602002602001604051908101604052809291908181526020016000905b8282101561090257838290600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505081526020019060010190610824565b50505050905060008261099057600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610a0d565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205b604051806040016040529081600082015481526020016001820154815250509050610a37816111e8565b610aa5578215610a73576040517fb915a49100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fd80c329700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8251811015610ba9578573ffffffffffffffffffffffffffffffffffffffff16838281518110610adb57610ada6124c6565b5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff16141580610b5457508473ffffffffffffffffffffffffffffffffffffffff16838281518110610b2f57610b2e6124c6565b5b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff1614155b610b95578315610b7357610b6e8687878560000151611209565b610b83565b610b8286868460000151611391565b5b610b908686858488611415565b610ba9565b600181610ba29190612524565b9050610aa8565b505050505050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610c5981604051806040016040529081600082015481526020016001820154815250506111e8565b15610c90576040517f787ee7b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008390506000610ca2828534611885565b9050600160405180604001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050508383600001819055508083600101819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fa0aeb6c6f6c5b9432c27419b6f7fcbee3aa01b3475b4bffbdb2ca64362e24a3d8684600142604051610e169493929190612558565b60405180910390a3610e2a338660016119d4565b5050505050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610ed981604051806040016040529081600082015481526020016001820154815250506111e8565b15610f10576040517f5106a74a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008490506000610f22828686611885565b9050848273ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401610f609291906125ac565b602060405180830381865afa158015610f7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa191906125ea565b1015610fd9576040517ffa33d36b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b815260040161101693929190612617565b6020604051808303816000875af1158015611035573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110599190612663565b50600060405180604001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050508483600001819055508083600101819055508573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fa0aeb6c6f6c5b9432c27419b6f7fcbee3aa01b3475b4bffbdb2ca64362e24a3d87846000426040516111cc9493929190612558565b60405180910390a36111e0338760006119d4565b505050505050565b600080826020015114158061120257506000826000015114155b9050919050565b60008273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611256573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127a91906126c9565b60ff16600a0a828161128f5761128e6126f6565b5b04600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015402905060008473ffffffffffffffffffffffffffffffffffffffff168260405161133990612756565b60006040518083038185875af1925050503d8060008114611376576040519150601f19603f3d011682016040523d82523d6000602084013e61137b565b606091505b505090508061138957600080fd5b505050505050565b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff1660e01b81526004016113cc92919061276b565b6020604051808303816000875af11580156113eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140f9190612663565b50505050565b5b825182101561187e578473ffffffffffffffffffffffffffffffffffffffff16838381518110611449576114486124c6565b5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff161415806114c257508373ffffffffffffffffffffffffffffffffffffffff1683838151811061149d5761149c6124c6565b5b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff1614155b61186a576000816114d45760006114d7565b60015b90505b600184516114e89190612794565b8310156115dc57836001846114fd9190612524565b8151811061150e5761150d6124c6565b5b6020026020010151818481548110611529576115286124c6565b5b906000526020600020906002020160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050506001836115d59190612524565b92506114da565b80600185516115eb9190612794565b815481106115fc576115fb6124c6565b5b9060005260206000209060020201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550508080548061166c5761166b6127c8565b5b6001900381819060005260206000209060020201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550509055811561176d57600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160009055600182016000905550506117fd565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160009055600182016000905550505b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f1151f923a1d121a78f77ffef06ec39e4d1bb5a3fc302b1784f23e6ca57de57c5844260405161185c9291906127f7565b60405180910390a35061187e565b6001826118779190612524565b9150611416565b5050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f791906126c9565b60ff16600a0a9050600084148061191a5750600081856119179190612820565b14155b15611951576040517faa41083400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000818581611963576119626126f6565b5b049050600084148061198157506000818561197e9190612820565b14155b156119b8576040517f221fd0b200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8084816119c8576119c76126f6565b5b04925050509392505050565b600081611a5c57600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611ad9565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205b9050600082611ae9576001611aec565b60005b805480602002602001604051908101604052809291908181526020016000905b82821015611bea57838290600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505081526020019060010190611b0c565b50505050905060005b8151811015612108576000828281518110611c1157611c106124c6565b5b60200260200101519050600085611cab5760036000836000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611d30565b60026000836000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205b6040518060400160405290816000820154815260200160018201548152505090508060200151856001015414611d675750506120f4565b6000611d7b86600001548360000151612110565b9050600087611d8e578360000151611d90565b895b9050600088611d9f578a611da5565b84600001515b9050611db2828b85611391565b611dbe82828c86611209565b8815611e5e578260026000876000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000876020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282540392505081905550611ef4565b8260036000876000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000876020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600082825403925050819055505b8288600001600082825403925050819055508973ffffffffffffffffffffffffffffffffffffffff16856000015173ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff167f699a325f100b826329df08bb2e9846524ad3361f05189e22de37e64c18e8f6e1868c600101548e42604051611f889493929190612558565b60405180910390a46000838560000151611fa29190612794565b03611fba57611fb985600001518b89898d15611415565b5b60008860000154036120ee576120e48b8b8b611fd7576000611fda565b60015b805480602002602001604051908101604052809291908181526020016000905b828210156120d857838290600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505081526020019060010190611ffa565b5050505060008d611415565b5050505050612108565b50505050505b6001816121019190612524565b9050611bf3565b505050505050565b600081831061211f5781612121565b825b905092915050565b604051806040016040528060008152602001600081525090565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006121b98261218e565b9050919050565b6121c9816121ae565b81146121d457600080fd5b50565b6000813590506121e6816121c0565b92915050565b6000806040838503121561220357612202612189565b5b6000612211858286016121d7565b9250506020612222858286016121d7565b9150509250929050565b6000819050919050565b61223f8161222c565b82525050565b60408201600082015161225b6000850182612236565b50602082015161226e6020850182612236565b50505050565b60006040820190506122896000830184612245565b92915050565b6122988161222c565b82525050565b60006020820190506122b3600083018461228f565b92915050565b60008115159050919050565b6122ce816122b9565b81146122d957600080fd5b50565b6000813590506122eb816122c5565b92915050565b60008060006060848603121561230a57612309612189565b5b6000612318868287016121d7565b9350506020612329868287016121d7565b925050604061233a868287016122dc565b9150509250925092565b61234d816122b9565b82525050565b60006020820190506123686000830184612344565b92915050565b6123778161222c565b811461238257600080fd5b50565b6000813590506123948161236e565b92915050565b600080604083850312156123b1576123b0612189565b5b60006123bf85828601612385565b92505060206123d0858286016122dc565b9150509250929050565b6123e3816121ae565b82525050565b6040820160008201516123ff60008501826123da565b50602082015161241260208501826123da565b50505050565b600060408201905061242d60008301846123e9565b92915050565b6000806040838503121561244a57612449612189565b5b6000612458858286016121d7565b925050602061246985828601612385565b9150509250929050565b60008060006060848603121561248c5761248b612189565b5b600061249a868287016121d7565b93505060206124ab86828701612385565b92505060406124bc86828701612385565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061252f8261222c565b915061253a8361222c565b9250828201905080821115612552576125516124f5565b5b92915050565b600060808201905061256d600083018761228f565b61257a602083018661228f565b6125876040830185612344565b612594606083018461228f565b95945050505050565b6125a6816121ae565b82525050565b60006040820190506125c1600083018561259d565b6125ce602083018461259d565b9392505050565b6000815190506125e48161236e565b92915050565b600060208284031215612600576125ff612189565b5b600061260e848285016125d5565b91505092915050565b600060608201905061262c600083018661259d565b612639602083018561259d565b612646604083018461228f565b949350505050565b60008151905061265d816122c5565b92915050565b60006020828403121561267957612678612189565b5b60006126878482850161264e565b91505092915050565b600060ff82169050919050565b6126a681612690565b81146126b157600080fd5b50565b6000815190506126c38161269d565b92915050565b6000602082840312156126df576126de612189565b5b60006126ed848285016126b4565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600081905092915050565b50565b6000612740600083612725565b915061274b82612730565b600082019050919050565b600061276182612733565b9150819050919050565b6000604082019050612780600083018561259d565b61278d602083018461228f565b9392505050565b600061279f8261222c565b91506127aa8361222c565b92508282039050818111156127c2576127c16124f5565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600060408201905061280c6000830185612344565b612819602083018461228f565b9392505050565b600061282b8261222c565b91506128368361222c565b925082612846576128456126f6565b5b82820690509291505056fea2646970667358221220f102ab83efbd88a5bd647c9fb686f51f2f8b740ea26c1d954cace33a92277a1d64736f6c63430008120033",
    "deployedBytecode": "0x6080604052600436106100865760003560e01c80632bcafffd116100595780632bcafffd1461015b578063684d35cf1461019857806376e86a9a146101d5578063b6265ec3146101fe578063f437b29b1461021a57610086565b8063022a11ea1461008b5780630528e57c146100c857806324aaf97f1461010557806329ce16bb14610130575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad91906121ec565b610243565b6040516100bf9190612274565b60405180910390f35b3480156100d457600080fd5b506100ef60048036038101906100ea91906121ec565b610333565b6040516100fc9190612274565b60405180910390f35b34801561011157600080fd5b5061011a610423565b604051610127919061229e565b60405180910390f35b34801561013c57600080fd5b5061014561042f565b604051610152919061229e565b60405180910390f35b34801561016757600080fd5b50610182600480360381019061017d91906122f1565b61043c565b60405161018f9190612353565b60405180910390f35b3480156101a457600080fd5b506101bf60048036038101906101ba919061239a565b610623565b6040516101cc9190612418565b60405180910390f35b3480156101e157600080fd5b506101fc60048036038101906101f791906122f1565b61078e565b005b61021860048036038101906102139190612433565b610bb1565b005b34801561022657600080fd5b50610241600480360381019061023c9190612473565b610e31565b005b61024b612129565b6000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090506102f3816111e8565b610329576040517fd80c329700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8091505092915050565b61033b612129565b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090506103e3816111e8565b610419576040517fb915a49100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8091505092915050565b60008080549050905090565b6000600180549050905090565b6000808261044b57600061044e565b60015b805480602002602001604051908101604052809291908181526020016000905b8282101561054c57838290600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250508152602001906001019061046e565b5050505090506000805b8251811015610616576000838281518110610574576105736124c6565b5b602002602001015190508773ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff161415806105ed57508673ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1614155b156105f85750610602565b6001925050610616565b60018161060f9190612524565b9050610556565b5080925050509392505050565b61062b612143565b60008261063d57600080549050610644565b6001805490505b905080841061067f576040517f5079a79700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b826106ab5760008481548110610698576106976124c6565b5b90600052602060002090600202016106ce565b600184815481106106bf576106be6124c6565b5b90600052602060002090600202015b6040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505091505092915050565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107f3576040517f7c76691600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081610801576000610804565b60015b805480602002602001604051908101604052809291908181526020016000905b8282101561090257838290600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505081526020019060010190610824565b50505050905060008261099057600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610a0d565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205b604051806040016040529081600082015481526020016001820154815250509050610a37816111e8565b610aa5578215610a73576040517fb915a49100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fd80c329700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8251811015610ba9578573ffffffffffffffffffffffffffffffffffffffff16838281518110610adb57610ada6124c6565b5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff16141580610b5457508473ffffffffffffffffffffffffffffffffffffffff16838281518110610b2f57610b2e6124c6565b5b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff1614155b610b95578315610b7357610b6e8687878560000151611209565b610b83565b610b8286868460000151611391565b5b610b908686858488611415565b610ba9565b600181610ba29190612524565b9050610aa8565b505050505050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610c5981604051806040016040529081600082015481526020016001820154815250506111e8565b15610c90576040517f787ee7b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008390506000610ca2828534611885565b9050600160405180604001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050508383600001819055508083600101819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fa0aeb6c6f6c5b9432c27419b6f7fcbee3aa01b3475b4bffbdb2ca64362e24a3d8684600142604051610e169493929190612558565b60405180910390a3610e2a338660016119d4565b5050505050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610ed981604051806040016040529081600082015481526020016001820154815250506111e8565b15610f10576040517f5106a74a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008490506000610f22828686611885565b9050848273ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401610f609291906125ac565b602060405180830381865afa158015610f7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa191906125ea565b1015610fd9576040517ffa33d36b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b815260040161101693929190612617565b6020604051808303816000875af1158015611035573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110599190612663565b50600060405180604001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050508483600001819055508083600101819055508573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fa0aeb6c6f6c5b9432c27419b6f7fcbee3aa01b3475b4bffbdb2ca64362e24a3d87846000426040516111cc9493929190612558565b60405180910390a36111e0338760006119d4565b505050505050565b600080826020015114158061120257506000826000015114155b9050919050565b60008273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611256573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127a91906126c9565b60ff16600a0a828161128f5761128e6126f6565b5b04600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015402905060008473ffffffffffffffffffffffffffffffffffffffff168260405161133990612756565b60006040518083038185875af1925050503d8060008114611376576040519150601f19603f3d011682016040523d82523d6000602084013e61137b565b606091505b505090508061138957600080fd5b505050505050565b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff1660e01b81526004016113cc92919061276b565b6020604051808303816000875af11580156113eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140f9190612663565b50505050565b5b825182101561187e578473ffffffffffffffffffffffffffffffffffffffff16838381518110611449576114486124c6565b5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff161415806114c257508373ffffffffffffffffffffffffffffffffffffffff1683838151811061149d5761149c6124c6565b5b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff1614155b61186a576000816114d45760006114d7565b60015b90505b600184516114e89190612794565b8310156115dc57836001846114fd9190612524565b8151811061150e5761150d6124c6565b5b6020026020010151818481548110611529576115286124c6565b5b906000526020600020906002020160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050506001836115d59190612524565b92506114da565b80600185516115eb9190612794565b815481106115fc576115fb6124c6565b5b9060005260206000209060020201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550508080548061166c5761166b6127c8565b5b6001900381819060005260206000209060020201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550509055811561176d57600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160009055600182016000905550506117fd565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160009055600182016000905550505b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f1151f923a1d121a78f77ffef06ec39e4d1bb5a3fc302b1784f23e6ca57de57c5844260405161185c9291906127f7565b60405180910390a35061187e565b6001826118779190612524565b9150611416565b5050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f791906126c9565b60ff16600a0a9050600084148061191a5750600081856119179190612820565b14155b15611951576040517faa41083400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000818581611963576119626126f6565b5b049050600084148061198157506000818561197e9190612820565b14155b156119b8576040517f221fd0b200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8084816119c8576119c76126f6565b5b04925050509392505050565b600081611a5c57600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611ad9565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205b9050600082611ae9576001611aec565b60005b805480602002602001604051908101604052809291908181526020016000905b82821015611bea57838290600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505081526020019060010190611b0c565b50505050905060005b8151811015612108576000828281518110611c1157611c106124c6565b5b60200260200101519050600085611cab5760036000836000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611d30565b60026000836000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205b6040518060400160405290816000820154815260200160018201548152505090508060200151856001015414611d675750506120f4565b6000611d7b86600001548360000151612110565b9050600087611d8e578360000151611d90565b895b9050600088611d9f578a611da5565b84600001515b9050611db2828b85611391565b611dbe82828c86611209565b8815611e5e578260026000876000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000876020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282540392505081905550611ef4565b8260036000876000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000876020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600082825403925050819055505b8288600001600082825403925050819055508973ffffffffffffffffffffffffffffffffffffffff16856000015173ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff167f699a325f100b826329df08bb2e9846524ad3361f05189e22de37e64c18e8f6e1868c600101548e42604051611f889493929190612558565b60405180910390a46000838560000151611fa29190612794565b03611fba57611fb985600001518b89898d15611415565b5b60008860000154036120ee576120e48b8b8b611fd7576000611fda565b60015b805480602002602001604051908101604052809291908181526020016000905b828210156120d857838290600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505081526020019060010190611ffa565b5050505060008d611415565b5050505050612108565b50505050505b6001816121019190612524565b9050611bf3565b505050505050565b600081831061211f5781612121565b825b905092915050565b604051806040016040528060008152602001600081525090565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006121b98261218e565b9050919050565b6121c9816121ae565b81146121d457600080fd5b50565b6000813590506121e6816121c0565b92915050565b6000806040838503121561220357612202612189565b5b6000612211858286016121d7565b9250506020612222858286016121d7565b9150509250929050565b6000819050919050565b61223f8161222c565b82525050565b60408201600082015161225b6000850182612236565b50602082015161226e6020850182612236565b50505050565b60006040820190506122896000830184612245565b92915050565b6122988161222c565b82525050565b60006020820190506122b3600083018461228f565b92915050565b60008115159050919050565b6122ce816122b9565b81146122d957600080fd5b50565b6000813590506122eb816122c5565b92915050565b60008060006060848603121561230a57612309612189565b5b6000612318868287016121d7565b9350506020612329868287016121d7565b925050604061233a868287016122dc565b9150509250925092565b61234d816122b9565b82525050565b60006020820190506123686000830184612344565b92915050565b6123778161222c565b811461238257600080fd5b50565b6000813590506123948161236e565b92915050565b600080604083850312156123b1576123b0612189565b5b60006123bf85828601612385565b92505060206123d0858286016122dc565b9150509250929050565b6123e3816121ae565b82525050565b6040820160008201516123ff60008501826123da565b50602082015161241260208501826123da565b50505050565b600060408201905061242d60008301846123e9565b92915050565b6000806040838503121561244a57612449612189565b5b6000612458858286016121d7565b925050602061246985828601612385565b9150509250929050565b60008060006060848603121561248c5761248b612189565b5b600061249a868287016121d7565b93505060206124ab86828701612385565b92505060406124bc86828701612385565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061252f8261222c565b915061253a8361222c565b9250828201905080821115612552576125516124f5565b5b92915050565b600060808201905061256d600083018761228f565b61257a602083018661228f565b6125876040830185612344565b612594606083018461228f565b95945050505050565b6125a6816121ae565b82525050565b60006040820190506125c1600083018561259d565b6125ce602083018461259d565b9392505050565b6000815190506125e48161236e565b92915050565b600060208284031215612600576125ff612189565b5b600061260e848285016125d5565b91505092915050565b600060608201905061262c600083018661259d565b612639602083018561259d565b612646604083018461228f565b949350505050565b60008151905061265d816122c5565b92915050565b60006020828403121561267957612678612189565b5b60006126878482850161264e565b91505092915050565b600060ff82169050919050565b6126a681612690565b81146126b157600080fd5b50565b6000815190506126c38161269d565b92915050565b6000602082840312156126df576126de612189565b5b60006126ed848285016126b4565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600081905092915050565b50565b6000612740600083612725565b915061274b82612730565b600082019050919050565b600061276182612733565b9150819050919050565b6000604082019050612780600083018561259d565b61278d602083018461228f565b9392505050565b600061279f8261222c565b91506127aa8361222c565b92508282039050818111156127c2576127c16124f5565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600060408201905061280c6000830185612344565b612819602083018461228f565b9392505050565b600061282b8261222c565b91506128368361222c565b925082612846576128456126f6565b5b82820690509291505056fea2646970667358221220f102ab83efbd88a5bd647c9fb686f51f2f8b740ea26c1d954cace33a92277a1d64736f6c63430008120033",
    "devdoc": {
        "author": "Chuong Thai",
        "kind": "dev",
        "methods": {
            "cancelOrder(address,address,bool)": {
                "details": "remove order out of order book and send back money or token to owner"
            },
            "getBuyOrderCount()": {
                "details": "return number of buy order"
            },
            "getDetailBuyOrder(address,address)": {
                "details": "return detail buy order"
            },
            "getDetailSellOrder(address,address)": {
                "details": "return detail sell order"
            },
            "getSellOrderCount()": {
                "details": "return number of sell order"
            },
            "getUserOrder(uint256,bool)": {
                "details": "return user order"
            },
            "isOnOrderBook(address,address,bool)": {
                "details": "check if order is still on orderbook"
            },
            "placeBuyOrder(address,uint256)": {
                "details": "Place a buy order to sell order book Takes money from sender Emits a {OrderPlaced} event"
            },
            "placeSellOrder(address,uint256,uint256)": {
                "details": "Place a sell order to sell order book Takes tokens from sender Emits a {OrderPlaced} event"
            }
        },
        "title": "A simple version of token marketplace",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {},
        "notice": "This contract for creating a token marketplace with simple order matching algorithm",
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 164,
                "contract": "contracts/TokenMarketplace.sol:TokenMarketplace",
                "label": "_userSellOrders",
                "offset": 0,
                "slot": "0",
                "type": "t_array(t_struct(UserOrder)115_storage)dyn_storage"
            },
            {
                "astId": 168,
                "contract": "contracts/TokenMarketplace.sol:TokenMarketplace",
                "label": "_userBuyOrders",
                "offset": 0,
                "slot": "1",
                "type": "t_array(t_struct(UserOrder)115_storage)dyn_storage"
            },
            {
                "astId": 175,
                "contract": "contracts/TokenMarketplace.sol:TokenMarketplace",
                "label": "_sellOrderDetailBook",
                "offset": 0,
                "slot": "2",
                "type": "t_mapping(t_address,t_mapping(t_address,t_struct(OrderDetail)120_storage))"
            },
            {
                "astId": 182,
                "contract": "contracts/TokenMarketplace.sol:TokenMarketplace",
                "label": "_buyOrderDetailBook",
                "offset": 0,
                "slot": "3",
                "type": "t_mapping(t_address,t_mapping(t_address,t_struct(OrderDetail)120_storage))"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_struct(UserOrder)115_storage)dyn_storage": {
                "base": "t_struct(UserOrder)115_storage",
                "encoding": "dynamic_array",
                "label": "struct TokenMarketplace.UserOrder[]",
                "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_struct(OrderDetail)120_storage))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(address => struct TokenMarketplace.OrderDetail))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_address,t_struct(OrderDetail)120_storage)"
            },
            "t_mapping(t_address,t_struct(OrderDetail)120_storage)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => struct TokenMarketplace.OrderDetail)",
                "numberOfBytes": "32",
                "value": "t_struct(OrderDetail)120_storage"
            },
            "t_struct(OrderDetail)120_storage": {
                "encoding": "inplace",
                "label": "struct TokenMarketplace.OrderDetail",
                "members": [
                    {
                        "astId": 117,
                        "contract": "contracts/TokenMarketplace.sol:TokenMarketplace",
                        "label": "amount",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 119,
                        "contract": "contracts/TokenMarketplace.sol:TokenMarketplace",
                        "label": "price",
                        "offset": 0,
                        "slot": "1",
                        "type": "t_uint256"
                    }
                ],
                "numberOfBytes": "64"
            },
            "t_struct(UserOrder)115_storage": {
                "encoding": "inplace",
                "label": "struct TokenMarketplace.UserOrder",
                "members": [
                    {
                        "astId": 112,
                        "contract": "contracts/TokenMarketplace.sol:TokenMarketplace",
                        "label": "owner",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_address"
                    },
                    {
                        "astId": 114,
                        "contract": "contracts/TokenMarketplace.sol:TokenMarketplace",
                        "label": "tokenAddress",
                        "offset": 0,
                        "slot": "1",
                        "type": "t_address"
                    }
                ],
                "numberOfBytes": "64"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
